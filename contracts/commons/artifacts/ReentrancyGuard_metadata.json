{
	"compiler": {
		"version": "0.8.2+commit.661d1103"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/commons/ReentrancyGuard.sol": "ReentrancyGuard"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/commons/ReentrancyGuard.sol": {
			"keccak256": "0x333ce5f19bbb1c2f0b27a57512b42e6c881f7d385d9e19d324a00b6f194d1b90",
			"license": "MIT",
			"urls": [
				"bzz-raw://04e983ac22d53e46d066b2ef5b9a94387026a376157e566aeda3f26e97fc4106",
				"dweb:/ipfs/QmXbasxVKN5JydePVs2DuF5wAzkGUWha3wKLyBoB7KHkGY"
			]
		}
	},
	"version": 1
}